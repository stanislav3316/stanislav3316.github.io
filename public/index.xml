<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech blog</title>
    <link>https://stanislav3316.github.io/</link>
    <description>Recent content on Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Sep 2023 09:03:20 -0800</lastBuildDate><atom:link href="https://stanislav3316.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Different ways of couplings</title>
      <link>https://stanislav3316.github.io/posts/21-09-2023-different-couplings/</link>
      <pubDate>Thu, 21 Sep 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/21-09-2023-different-couplings/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Couplings Temporal coupling Temporal coupling is a concept in software design and architecture that refers to a situation where two or more components or modules in a software system depend on each other with respect to the timing or sequence of their execution. In other words, these components are tightly coupled in terms of when they should be executed, which can lead to various issues in software development and maintenance.</description>
    </item>
    
    <item>
      <title>Commands in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/16-09-2023-commands-in-event-driven-arch/</link>
      <pubDate>Sat, 16 Sep 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/16-09-2023-commands-in-event-driven-arch/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Commands A command is an intention to do, not something that has already happened in the system. Commands provide minimal but enough information for decision-making and can be sent synchronously or asynchronously.
Similar to events, commands should adhere to common principles and a structured format:
use a verb-like syntax for their naming should include criteria, such as command_id for distinguishing them for idempotence should include criteria, such as command_type for applying actions based on different types (on consumer side for commandBus implementation) may include criteria, such as expected_&amp;lt;entity&amp;gt;_version for applying actions based on CAS (compare-and-swap) operations may include criteria, such as trace_id for enabling tracing capabilities &amp;hellip; As example, WithdrawUserWalletCommand:</description>
    </item>
    
    <item>
      <title>Consumer retry logic in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/04-09-2023-consumer-retry-logic/</link>
      <pubDate>Mon, 04 Sep 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/04-09-2023-consumer-retry-logic/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Consumer retry logic When processing events from any message broker, such as RabbitMQ or Kafka, it&amp;rsquo;s essential to consider implementing retry logic to handle outages or errors effectively.
Retrayable and Non-retrayable exceptions There are two types of exceptions:
retrayable - you can try a little bit later, after some time to complete operation non-retrayable - this kind of exceptions can&amp;rsquo;t be fixed over time The primary benefit of categorizing exceptions into different types is the ability to make decisions based on the specific type of exception.</description>
    </item>
    
    <item>
      <title>Delivery guarantee for events</title>
      <link>https://stanislav3316.github.io/posts/31-08-2023-delivery-guarantee-for-events/</link>
      <pubDate>Thu, 31 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/31-08-2023-delivery-guarantee-for-events/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Delivery guarantee for events When application saves some information about entity to data store and then propogates this changes to a broker (RabbitMQ, Kafka, &amp;hellip;) there are two transactions:
between application and data store between application and broker So, in case of application failure, network problem between application and a broker or by any other outage, this changes may not be sent to the broker (change will be saved in data store, but not propogated to broker).</description>
    </item>
    
    <item>
      <title>Events communication in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</link>
      <pubDate>Mon, 14 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Events communication in Event-Driven architecture In this article we cover most popular approaches how to organize events communiction in the system.
1. Queus (RabbitMQ, &amp;hellip;) In the case of queues, the application sends events to a queue broker, which then transfers these events to all bound queues (fan out), or to a single specified queue.</description>
    </item>
    
    <item>
      <title>Events in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</link>
      <pubDate>Sun, 06 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Inhabitants of Event-Driven architecture In Event-Driven architecture there are two main inhabitants:
commands - intention to apply some actions / changes events - what already happened in the system Building Event-Driven architecture it&amp;rsquo;s important to pay a lot of attention to events in the system. They are core elements of data flows, and should be designed properly and with care.</description>
    </item>
    
  </channel>
</rss>
