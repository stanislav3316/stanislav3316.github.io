<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech blog</title>
    <link>https://stanislav3316.github.io/</link>
    <description>Recent content on Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Aug 2023 09:03:20 -0800</lastBuildDate><atom:link href="https://stanislav3316.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Delivery guarantee for events</title>
      <link>https://stanislav3316.github.io/posts/31-08-2023-delivery-guarantee-for-events/</link>
      <pubDate>Thu, 31 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/31-08-2023-delivery-guarantee-for-events/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Delivery guarantee for events When application saves some information about entity to data store and then propogates this changes to a broker (RabbitMQ, Kafka, &amp;hellip;) there are two transactions:
between application and data store between application and broker So, in case of application failure, network problem between application and a broker or by any other outage, this changes may not be sent to the broker (change will be saved in data store, but not propogated to broker).</description>
    </item>
    
    <item>
      <title>Events communication in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</link>
      <pubDate>Mon, 14 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Events communication in Event-Driven architecture Queus (RabbitMQ, &amp;hellip;) In queues case, service sends events to queue broker and broker can send events to all binded queus (fanous), or to only one business process queue.
consider use insrastructure-as-code pattern to achieve maintainability and simplicity
Pros:
event is in queue until app&amp;rsquo;s consumer processed it (queue doesn&amp;rsquo;t persist events when they were already processed) low latency approach simple publish-subscribe pattern Cons:</description>
    </item>
    
    <item>
      <title>Events in Event-Driven architecture</title>
      <link>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</link>
      <pubDate>Sun, 06 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Event types Building Event-Driven or Asynchronous architecture it&amp;rsquo;s important to pay a lot of attention to events in the system. They are core elements of data flows, and should be designed properly and with care. Any futrher refactoring of these events will be painful and difficult - strict structure is our helper.</description>
    </item>
    
  </channel>
</rss>
