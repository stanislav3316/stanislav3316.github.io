<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech blog</title>
    <link>https://stanislav3316.github.io/</link>
    <description>Recent content on Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Aug 2023 09:03:20 -0800</lastBuildDate><atom:link href="https://stanislav3316.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ways of conveying/transferring events in Asynchronous systems</title>
      <link>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</link>
      <pubDate>Mon, 14 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/14-08-2023-ways-of-conveying-events-in-async-system/</guid>
      <description> ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Ways of conveying/transferring events Queus (RabbitMQ, &amp;hellip;) Messages log (Kafka, &amp;hellip;) Webhooks (Rest) Polling (Rest) WS / SSE / HTTP/2.0 Conclusion each variant is a trade-off, consider you devops environment, expertise and domain constraints to make right choice.
Further Reading </description>
    </item>
    
    <item>
      <title>Events in Event-Driver Architecture</title>
      <link>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</link>
      <pubDate>Sun, 06 Aug 2023 09:03:20 -0800</pubDate>
      
      <guid>https://stanislav3316.github.io/posts/06-08-2023-events-in-event-driven-arch/</guid>
      <description>ℹ️ disclaimer
This article represented my mental model at the time of writing, but I’m always iterating on it.
Event types Building Event-Driven or Asynchronous architecture it&amp;rsquo;s important to pay a lot of attention to events in the system. They are core elements of data flows, and should be designed properly and with care. Any futrher refactoring of these events will be painful and difficult - strict structure is our helper.</description>
    </item>
    
  </channel>
</rss>
